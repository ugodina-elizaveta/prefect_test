#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤–æ—Ä–∫–µ—Ä–æ–≤ –¥–ª—è –≤—Å–µ—Ö work pools, –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –≤ prefect.yaml —Ñ–∞–π–ª–∞—Ö.
"""

import os
import subprocess
import threading
import time
import yaml
from pathlib import Path


def find_work_pools(flows_dir: str) -> set:
    """–ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ work pools –∏–∑ prefect.yaml —Ñ–∞–π–ª–æ–≤."""
    pools = set()
    flows_path = Path(flows_dir)

    for item in flows_path.iterdir():
        if item.is_dir():
            prefect_file = item / "prefect.yaml"
            if prefect_file.exists():
                try:
                    with open(prefect_file, 'r') as f:
                        config = yaml.safe_load(f)

                    deployments = config.get('deployments', [])
                    for deployment in deployments:
                        work_pool = deployment.get('work_pool', {})
                        pool_name = work_pool.get('name')
                        if pool_name:
                            pools.add(pool_name)
                except Exception as e:
                    print(f"‚ö†Ô∏è  Could not parse {prefect_file}: {e}")

    return pools


def start_worker(pool_name: str):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤–æ—Ä–∫–µ—Ä –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø—É–ª–∞."""
    print(f"üöÄ Starting worker for pool: {pool_name}")
    try:
        subprocess.run(
            ["prefect", "worker", "start", "--pool", pool_name],
            check=True
        )
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Worker for pool {pool_name} failed: {e}")
    except KeyboardInterrupt:
        print(f"üõë Worker for pool {pool_name} stopped")


def main():
    flows_dir = "/opt/prefect/flows"

    if not os.path.exists(flows_dir):
        print(f"‚ùå Flows directory not found: {flows_dir}")
        return

    pools = find_work_pools(flows_dir)

    if not pools:
        print("‚ÑπÔ∏è  No work pools found, starting default worker")
        start_worker("default-pool")
        return

    print(f"Found work pools: {', '.join(pools)}")

    # –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –ø—É–ª, –∑–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    if len(pools) == 1:
        pool_name = list(pools)[0]
        start_worker(pool_name)
        return

    # –ï—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—É–ª–æ–≤, –∑–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –ø–æ—Ç–æ–∫–∞—Ö
    threads = []
    for pool_name in pools:
        thread = threading.Thread(target=start_worker, args=(pool_name,))
        thread.daemon = True
        thread.start()
        threads.append(thread)
        time.sleep(2)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—É—Å–∫–∞–º–∏

    try:
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ—Ç–æ–∫–æ–≤
        for thread in threads:
            thread.join()
    except KeyboardInterrupt:
        print("\nüõë Stopping all workers...")


if __name__ == "__main__":
    main()
